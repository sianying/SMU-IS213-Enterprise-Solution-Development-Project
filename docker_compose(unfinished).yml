version: "3.8"
 
services:
    #insert database before building the simple microservices?

    # 6 simple microservices

    #port 5000
    delivery:
        image: <dockerid>/delivery:1.0
        restart: always
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/delivery_db

    #port 5001
    driver:
        image: <dockerid>/driver:1.0
        restart: always
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/driver

    #port 5002
    customer:
        image: <dockerid>/customer:1.0
        restart: always
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/customer

    #port 5003        
    payment:
        image: <dockerid>/payment:1.0
        restart: always
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/payment

    #port 5004        
    schedule:
        image: <dockerid>/schedule:1.0
        restart: always
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/schedule_db
    
    #port 5005
    login:
        image: <dockerid>/login:1.0
        restart: always
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/login

    # 5 Complex microservices

    #port 5104, but done first since it is needed by 5100
    schedule_driver:
        image: <dockerid>/schedule_driver:1.0
        depends_on:
        -schedule
        environment:
            scheduleURL: http://delivery:5004/schedule
    
    #port 5100
    process_order:
        image: <dockerid>/process_order:1.0
        depends_on:
        - delivery
        - driver
        - customer
        - payment
        - schedule
        - schedule_driver
        environment:
            deliveryURL: http://delivery:5000/delivery
            driverURL: http://driver:5001/driver
            customerURL: http://delivery:5002/customer
            paymentURL: http://payment:5003/payment
            scheduleURL: http://delivery:5004/schedule
            ScheduleDriverURL: http://delivery:5104/schedule_driver


    #port 5101
    driver_view_details:
        image: <dockerid>/driver_view_details:1.0
        depends_on:
        - delivery
        environment:
            deliveryURL: http://delivery:5000/delivery


    # port 5102
    customer_view_details:
        image: <dockerid>/customer_view_details:1.0
        depends_on:
        - delivery
        - driver
        environment:
            deliveryURL: http://delivery:5000/delivery
            driverURL: http://driver:5001/driver

    #port 5103
    driver_complete_delivery:
        image: <dockerid>/driver_complete_delivery:1.0
        depends_on:
        - delivery
        - driver
        environment:
            deliveryURL: http://delivery:5000/delivery
            driverURL: http://driver:5001/driver

    #port 5105
    register_user:
        image: <dockerid>/register_user:1.0
        depends_on:
            - login
            - customer
            - driver     #register a driver
            environment:
                loginURL: http://login:5005/login
                customerURL: http://customer:5002/customer
                driverURL: http://driver:5001/driver


#KONGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
#version: "3"

volumes:
    pgdata: 
    kongadata:
  
networks:
    kong-net:
        driver: bridge
  
services:

#######################################
# Postgres: The database used by Kong
#######################################
    kong-database:
        image: postgres:9.6
        restart: always
        networks:
        - kong-net
        environment:
        POSTGRES_DB: kong
        POSTGRES_USER: kong
        POSTGRES_PASSWORD: password
        ports:
        - "5432:5432"
        healthcheck:
        test: ["CMD", "pg_isready", "-U", "kong"]
        interval: 10s
        timeout: 5s
        retries: 5
        volumes:
        - pgdata:/var/lib/postgresql/data

    #######################################
    # Kong database migration
    #######################################
    kong-migration:
        image: kong:2.0.4
        command: "kong migrations bootstrap"
        restart: on-failure
        networks:
        - kong-net
        environment:
        KONG_DATABASE: postgres
        KONG_PG_HOST: kong-database
        KONG_PG_USER: kong
        KONG_PG_PASSWORD: password
        depends_on:
        - kong-database

    #######################################
    # Kong: The API Gateway
    #######################################
    kong:
        image: kong:2.0.4
        restart: always
        networks:
        - kong-net
        environment:
        KONG_DATABASE: postgres
        KONG_PG_HOST: kong-database
        KONG_PG_USER: kong
        KONG_PG_PASSWORD: password
        KONG_PROXY_LISTEN: 0.0.0.0:8000
        KONG_ADMIN_LISTEN: 0.0.0.0:8001
        depends_on:
        - kong-migration
        ports:
        - "8000:8000"

    #######################################
    # Konga: Kong GUI
    #######################################
    konga:
        image: pantsel/konga
        restart: always
        networks:
            - kong-net
        environment:
        DB_ADAPTER: postgres
        DB_HOST: kong-database
        DB_USER: kong
        DB_PASSWORD: password
        DB_DATABASE: konga_db
        depends_on:
        - kong
        ports:
        - "1337:1337"
        volumes:
        - kongadata:/app/kongadata

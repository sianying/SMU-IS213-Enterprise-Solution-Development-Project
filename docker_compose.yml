version: "3.8"

volumes:
    rabbitmq_data:
 
services:
    # #database
    # cheetah_db:
    #     build:
    #         context: ./
    #         dockerfile: cheetah_db.Dockerfile
    #     image: mysql:5.7
    #     restart: always
    #     environment:
    #         MYSQL_DATABASE: 'cheetah_db'
    #         MYSQL_USER: 'root'
    #         MYSQL_PASSWORD: ''
    #         MYSQL_ROOT_PASSWORD: ''
    #     ports:
    #     # <Port exposed> : < MySQL Port running inside container>
    #         - '3306:3306'
    #     expose:
    #       # Opens port 3306 on the container
    #         - '3306'
    #     # Where our data will be persisted
    #     volumes:
    #         - my-db:/var/lib/mysql


    # 6 simple microservices

    #port 5000
    delivery:
      build:
        context: ./delivery            #idk whether context needs to be ./delivery/ or ./delivery
        dockerfile: delivery.Dockerfile
      image: zonghanlee/delivery:1.0
      restart: always
      ports:
        - "5000:5000"
      environment:
        dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/delivery
        PYTHONUNBUFFERED: 1


    #port 5001
    driver:
        build:
            context: ./driver
            dockerfile: driver.Dockerfile
        image: zonghanlee/driver:1.0
        restart: always
        ports:
            - "5001:5001"
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/driver
            PYTHONUNBUFFERED: 1


    #port 5002
    customer:
        build:
            context: ./customer
            dockerfile: customer.Dockerfile
        image: zonghanlee/customer:1.0
        restart: always
        ports:
            - "5002:5002"
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/customer
            PYTHONUNBUFFERED: 1


    #port 5003        
    payment:
        build:
            context: ./payment
            dockerfile: payment.Dockerfile
        image: zonghanlee/payment:1.0
        restart: always
        ports:
            - "5003:5003"
        environment:
            PYTHONUNBUFFERED: 1


    #port 5004        
    schedule:
        build:
            context: ./schedule
            dockerfile: schedule.Dockerfile
        image: zonghanlee/schedule:1.0
        restart: always
        ports:
            - "5004:5004"
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/schedule
            PYTHONUNBUFFERED: 1
            
    
    #port 5005
    login:
        build:
            context: ./login
            dockerfile: login.Dockerfile
        image: zonghanlee/login:1.0
        restart: always
        ports:
            - "5005:5005"
        environment:
            dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/login
            PYTHONUNBUFFERED: 1



    ############ AMQP SERVICES #############

    rabbitmq:    #no build, context etc
        image: rabbitmq:3-management
        hostname: esd-rabbit
        restart: always
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes: 
            - rabbitmq_data:/var/lib/rabbitmq

    #includes driver/customer notification and error microservice

    customer_notification:
        build:
            context: ./notification
            dockerfile: customer_noti.Dockerfile
        image: zonghanlee/customer_noti:1.0
        restart: always
        depends_on:
            - rabbitmq
        environment:
            rabbit_host: rabbitmq
            rabbit_port: 5672
            PYTHONUNBUFFERED: 1

    driver_notification:
        build:
            context: ./notification
            dockerfile: driver_noti.Dockerfile
        image: zonghanlee/driver_noti:1.0
        restart: always
        depends_on:
            - rabbitmq
        environment:
            rabbit_host: rabbitmq
            rabbit_port: 5672
            PYTHONUNBUFFERED: 1

    error_log:
        build:
            context: ./notification
            dockerfile: error.Dockerfile
        image: zonghanlee/error:1.0
        restart: always
        depends_on:
            - rabbitmq
        environment:
            rabbit_host: rabbitmq
            rabbit_port: 5672
            PYTHONUNBUFFERED: 1




    # 5 Complex microservices

    #port 5104, but done first since it is needed by 5100
    schedule_driver:
        build:
            context: ./complex_microservices/schedule_driver
            dockerfile: schedule_driver.Dockerfile
        image: zonghanlee/schedule_driver:1.0
        depends_on:
            - schedule
            - rabbitmq
        environment:
            rabbithost: rabbitmq
            rabbitport: 5672
            scheduleURL: http://schedule:5004/schedule
        ports:
            - "5104:5104"
    

    #port 5100
    process_order:
        build:
            context: ./complex_microservices/process_order
            dockerfile: process_order.Dockerfile
        image: zonghanlee/process_order:1.0
        restart: always
        depends_on:
            - delivery
            - payment
            - schedule
            - schedule_driver
            - rabbitmq
        environment:
            rabbithost: rabbitmq
            rabbitport: 5672
            deliveryURL: http://delivery:5000/delivery
            paymentURL: http://payment:5003/payment
            scheduleURL: http://schedule:5004/schedule
            ScheduleDriverURL: http://schedule_driver:5104/schedule_driver
            PYTHONUNBUFFERED: 1
        ports:
            - "5100:5100"


    #port 5101
    driver_view_details:
        build:
            context: ./complex_microservices/driver_view_details
            dockerfile: driver_view_details.Dockerfile
        image: zonghanlee/driver_view_details:1.0
        depends_on:
            - delivery
            - rabbitmq
        environment:
            rabbithost: rabbitmq
            rabbitport: 5672
            deliveryURL: http://delivery:5000/delivery
        ports:
            - "5101:5101"


    # port 5102
    customer_view_details:
        build:
            context: ./complex_microservices/customer_view_details
            dockerfile: customer_view_details.Dockerfile
        image: zonghanlee/customer_view_details:1.0
        depends_on:
            - delivery
            - driver
            - rabbitmq
        environment:
            rabbithost: rabbitmq
            rabbitport: 5672
            deliveryURL: http://delivery:5000/delivery
            driverURL: http://driver:5001/driver
        ports:
            - "5102:5102"

    #port 5103
    complete_delivery:
        build:
            context: ./complex_microservices/complete_delivery
            dockerfile: complete_delivery.Dockerfile
        image: zonghanlee/complete_delivery:1.0
        depends_on:
            - delivery
            - driver
            - rabbitmq
        environment:
            rabbithost: rabbitmq
            rabbitport: 5672
            deliveryURL: http://delivery:5000/delivery
            driverURL: http://driver:5001/driver
        ports:
            - "5103:5103"

    #port 5105
    register_user:
        build:
            context: ./complex_microservices/register_user
            dockerfile: register_user.Dockerfile
        image: zonghanlee/register_user:1.0
        depends_on:
            - login
            - customer
            - driver     #register a driver
            - rabbitmq
        environment:
            rabbithost: rabbitmq
            rabbitport: 5672
            loginURL: http://login:5005/login
            customerURL: http://customer:5002/customer
            driverURL: http://driver:5001/driver
        ports:
            - "5105:5105"


# #KONGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
# #version: "3"

# volumes:
#     pgdata: 
#     kongadata:
  
# networks:
#     kong-net:
#         driver: bridge
  
# services:

#######################################
# Postgres: The database used by Kong
#######################################
    # kong-database:
    #     image: postgres:9.6
    #     restart: always
    #     networks:
    #     - kong-net
    #     environment:
    #     POSTGRES_DB: kong
    #     POSTGRES_USER: kong
    #     POSTGRES_PASSWORD: password
    #     ports:
    #     - "5432:5432"
    #     healthcheck:
    #     test: ["CMD", "pg_isready", "-U", "kong"]
    #     interval: 10s
    #     timeout: 5s
    #     retries: 5
    #     volumes:
    #     - pgdata:/var/lib/postgresql/data

    # #######################################
    # # Kong database migration
    # #######################################
    # kong-migration:
    #     image: kong:2.0.4
    #     command: "kong migrations bootstrap"
    #     restart: on-failure
    #     networks:
    #     - kong-net
    #     environment:
    #     KONG_DATABASE: postgres
    #     KONG_PG_HOST: kong-database
    #     KONG_PG_USER: kong
    #     KONG_PG_PASSWORD: password
    #     depends_on:
    #     - kong-database

    # #######################################
    # # Kong: The API Gateway
    # #######################################
    # kong:
    #     image: kong:2.0.4
    #     restart: always
    #     networks:
    #     - kong-net
    #     environment:
    #     KONG_DATABASE: postgres
    #     KONG_PG_HOST: kong-database
    #     KONG_PG_USER: kong
    #     KONG_PG_PASSWORD: password
    #     KONG_PROXY_LISTEN: 0.0.0.0:8000
    #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
    #     depends_on:
    #     - kong-migration
    #     ports:
    #     - "8000:8000"

    # #######################################
    # # Konga: Kong GUI
    # #######################################
    # konga:
    #     image: pantsel/konga
    #     restart: always
    #     networks:
    #         - kong-net
    #     environment:
    #     DB_ADAPTER: postgres
    #     DB_HOST: kong-database
    #     DB_USER: kong
    #     DB_PASSWORD: password
    #     DB_DATABASE: konga_db
    #     depends_on:
    #     - kong
    #     ports:
    #     - "1337:1337"
    #     volumes:
    #     - kongadata:/app/kongadata
